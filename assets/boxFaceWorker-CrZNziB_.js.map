{"version":3,"file":"boxFaceWorker-CrZNziB_.js","sources":["../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/vec3.js","../src/tangentEncoding.ts","../src/quantize.ts","../src/boxFaceWorker.ts"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import { vec3 } from 'gl-matrix';\n\n/**\n * Encodes a tangent vector into a 16-bit value using normal and tangent vectors\n * Returns a 16-bit number where:\n * - Bits 0-14: Quantized angle (15 bits)\n * - Bit 15: Tangent sign (1 bit)\n */\nexport function encodeTangent(\n    normal: vec3,\n    tangent: vec3,\n    tangentSign: number\n): number {\n    // Create copies to avoid modifying input vectors\n    const normalCopy = vec3.clone(normal);\n    const tangentCopy = vec3.clone(tangent);\n\n    // Ensure vectors are normalized\n    vec3.normalize(normalCopy, normalCopy);\n    vec3.normalize(tangentCopy, tangentCopy);\n\n    // Calculate initial bitangent\n    const tempVec = Math.abs(normalCopy[0]) < 0.9 ?\n        vec3.fromValues(1, 0, 0) :\n        vec3.fromValues(0, 1, 0);\n    const bitangent = vec3.cross(vec3.create(), normalCopy, tempVec);\n    vec3.normalize(bitangent, bitangent);\n\n    // Calculate angle between tangent and bitangent\n    const cosAngle = vec3.dot(tangentCopy, bitangent);\n    const crossProduct = vec3.cross(vec3.create(), bitangent, tangentCopy);\n    const sinAngle = vec3.dot(crossProduct, normalCopy);\n    const angle = Math.atan2(sinAngle, cosAngle);\n\n    // Normalize angle to [0,1] range\n    const normalizedAngle = (angle + Math.PI) / (2 * Math.PI);\n\n    // Quantize to 15 bits (0-32767)\n    const quantizedAngle = Math.round(normalizedAngle * 32767) & 0x7FFF;\n\n    // Combine with sign bit\n    const sign = tangentSign > 0 ? 1 : 0;\n    return (sign << 15) | quantizedAngle;\n}\n\n/**\n * Decodes a 16-bit tangent encoding back into a tangent vector\n * @param encoded - The 16-bit encoded value\n * @param normal - The normal vector\n * @returns [tangent: vec3, tangentSign: number]\n */\nexport function decodeTangent(\n    encoded: number,\n    normal: vec3\n): [vec3, number] {\n    // Create a copy of the normal\n    const normalCopy = vec3.clone(normal);\n    vec3.normalize(normalCopy, normalCopy);\n\n    // Extract sign and angle\n    const sign = (encoded >> 15) & 1;\n    const quantizedAngle = encoded & 0x7FFF;\n\n    // Convert back to radians\n    const angle = (quantizedAngle / 32767) * (2 * Math.PI) - Math.PI;\n\n    // Calculate initial bitangent\n    const tempVec = Math.abs(normalCopy[0]) < 0.9 ?\n        vec3.fromValues(1, 0, 0) :\n        vec3.fromValues(0, 1, 0);\n    const bitangent = vec3.cross(vec3.create(), normalCopy, tempVec);\n    vec3.normalize(bitangent, bitangent);\n\n    // Rotate bitangent around normal by the decoded angle\n    const tangent = vec3.create();\n    const cosAngle = Math.cos(angle);\n    const sinAngle = Math.sin(angle);\n\n    // Use proper rotation formula\n    const rotatedBitangent = vec3.create();\n    vec3.scale(tangent, bitangent, cosAngle);\n    vec3.cross(rotatedBitangent, normalCopy, bitangent);\n    vec3.scaleAndAdd(tangent, tangent, rotatedBitangent, sinAngle);\n    vec3.normalize(tangent, tangent);\n\n    return [tangent, sign];\n}\n\n// Test function to verify encoding/decoding\nexport function testTangentEncoding(\n    normal: vec3,\n    tangent: vec3,\n    originalSign: number\n): void {\n    // Encode\n    const encoded = encodeTangent(normal, tangent, originalSign);\n\n    // Decode\n    const [decodedTangent, decodedSign] = decodeTangent(encoded, normal);\n\n    // Calculate error\n    const dotProduct = vec3.dot(tangent, decodedTangent);\n    const angleError = Math.acos(Math.min(1, Math.max(-1, dotProduct)));\n\n    console.log('Encoding test results:');\n    console.log('Original tangent:', Array.from(tangent));\n    console.log('Decoded tangent:', Array.from(decodedTangent));\n    console.log('Angle error (radians):', angleError);\n    console.log('Sign preserved:', originalSign === decodedSign);\n}\n\nif (false) {\n    // Example usage\n    const normal = vec3.fromValues(0, 1, 0);\n    const tangent = vec3.fromValues(1, 0, 0);\n    const originalSign = 1;\n\n    // Test the encoding/decoding\n    testTangentEncoding(normal, tangent, originalSign);\n\n    // Or use encode/decode directly\n    // @ts-ignore\n    const encoded = encodeTangent(normal, tangent, originalSign);\n    // @ts-ignore\n    const [decodedTangent, decodedSign] = decodeTangent(encoded, normal);\n}","import { vec3 } from 'gl-matrix';\nimport { encodeTangent } from './tangentEncoding';\n\nexport interface QuantizedMesh {\n    compressedData: Uint16Array;\n    indices: Uint32Array;\n    positionMin: vec3;\n    positionMax: vec3;\n    vertexBytes: number;\n}\n\n// - Positions: 3x16bits (quantized on mesh bounding box)\n// - Normals: 2x16bits (octahedral encoding)\n// - Tangents: 1x16bits (1 bit sign + 15 bits angle)\n// - UVs: 2x16bits (quantized 0-1 range)\n\n// Total: 8x16bits per vertex (16 bytes) vs 48 bytes for uncompressed format\nexport function quantizeMesh(numVertices: number, positions: Float32Array, normals: Float32Array, tangents: Float32Array, uvs: Float32Array, min: vec3 | null, max: vec3 | null): { compressedData: Uint16Array, positionMin: vec3, positionMax: vec3 } {\n    const compressedData = new Uint16Array(numVertices * 8); // 4 vec2 per vertex or 8x16bits\n\n    const positionMin = vec3.fromValues(Infinity, Infinity, Infinity);\n    const positionMax = vec3.fromValues(-Infinity, -Infinity, -Infinity);\n    if (!min || !max) {\n        // Find position bounds\n        for (let i = 0; i < positions.length; i += 3) {\n            positionMin[0] = Math.min(positionMin[0], positions[i]);\n            positionMin[1] = Math.min(positionMin[1], positions[i + 1]);\n            positionMin[2] = Math.min(positionMin[2], positions[i + 2]);\n            positionMax[0] = Math.max(positionMax[0], positions[i]);\n            positionMax[1] = Math.max(positionMax[1], positions[i + 1]);\n            positionMax[2] = Math.max(positionMax[2], positions[i + 2]);\n        }\n    } else {\n        vec3.copy(positionMin, min);\n        vec3.copy(positionMax, max);\n    }\n    // Quantize positions to 16 bits\n    const range = vec3.sub(vec3.create(), positionMax, positionMin);\n    for (let i = 0; i < numVertices; i++) {\n        const posIdx = i * 3;\n        const tanIdx = i * 4;\n        const uvIdx = i * 2;\n        const outIdx = i * 8;\n\n        // Quantize positions to 16 bits\n        const px = (positions[posIdx] - positionMin[0]) / range[0];\n        const py = (positions[posIdx + 1] - positionMin[1]) / range[1];\n        const pz = (positions[posIdx + 2] - positionMin[2]) / range[2];\n\n        compressedData[outIdx] = px * 65535;\n        compressedData[outIdx + 1] = py * 65535;\n\n        // Encode position.z and tangent angle+sign\n        compressedData[outIdx + 2] = pz * 65535;\n\n        // Calculate tangent angle\n        const normal = vec3.fromValues(normals[posIdx], normals[posIdx + 1], normals[posIdx + 2]);\n        const tangent = vec3.fromValues(tangents[tanIdx], tangents[tanIdx + 1], tangents[tanIdx + 2]);\n        const tangentSign = tangents[tanIdx + 3] > 0 ? 1 : 0;\n\n        const encodedTangent = encodeTangent(normal, tangent, tangentSign);\n        //const decodedTangent = decodeTangent(encodedTangent, normal);\n\n        compressedData[outIdx + 3] = encodedTangent;\n\n        // Encode normal using octahedral encoding\n        const nx = normals[posIdx];\n        const ny = normals[posIdx + 1];\n        const nz = normals[posIdx + 2];\n        const invL1Norm = 1 / (Math.abs(nx) + Math.abs(ny) + Math.abs(nz));\n\n        let octX = nx * invL1Norm;\n        let octY = ny * invL1Norm;\n\n        if (nz < 0) {\n            const temp = octX;\n            octX = (1 - Math.abs(octY)) * (octX >= 0 ? 1 : -1);\n            octY = (1 - Math.abs(temp)) * (octY >= 0 ? 1 : -1);\n        }\n\n        compressedData[outIdx + 4] = ((octX * 0.5 + 0.5) * 65535) | 0;\n        compressedData[outIdx + 5] = ((octY * 0.5 + 0.5) * 65535) | 0;\n\n        // Quantize UVs to 16 bits\n        compressedData[outIdx + 6] = (uvs[uvIdx] * 65535) | 0;\n        compressedData[outIdx + 7] = (uvs[uvIdx + 1] * 65535) | 0;\n    }\n\n    return {\n        compressedData,\n        positionMin,\n        positionMax,\n    };\n}","// import { vec3 } from 'gl-matrix';\n\nimport { Mesh } from './mesh';\nimport { quantizeMesh } from './quantize';\n\ntype vec3 = [number, number, number] | Float32Array;\nlet vec3: typeof import('gl-matrix').vec3;\n// Initialize gl-matrix\n(async () => {\n    const glMatrix = await import('gl-matrix');\n    vec3 = glMatrix.vec3;\n    // console.log(`[Worker ${self.name || 'unnamed'}] gl-matrix initialized`);\n})();\n\ninterface FaceData {\n    start: number[];\n    right: number[];\n    up: number[];\n    uvIndex: number[];\n    size: number[];\n    radius: number;\n    resolution: number;\n    faceIndex: number;\n    numVerticesPerFace: number;\n    numIndicesPerFace: number;\n    quantize: boolean;\n}\n\nfunction grid(\n    start: vec3,\n    right: vec3,\n    up: vec3,\n    width: number,\n    height: number,\n    widthSteps: number,\n    heightSteps: number,\n    indices: Uint32Array, // data will be pushed to indices and positions\n    positions: Float32Array, // data will be pushed to positions\n    faceIndex: number,\n    numVerticesPerFace: number\n): void {\n\n    const offsetVertexIndex = faceIndex * numVerticesPerFace;\n    // Traverse the face.\n    let pa = vec3.create();\n    let pb = vec3.create();\n    let pc = vec3.create();\n    let pd = vec3.create();\n    for (let x = 0; x < widthSteps; x++) {\n        for (let y = 0; y < heightSteps; y++) {\n            // Lower left corner of this quad.\n            vec3.scaleAndAdd(pa, start, right, (width * x) / widthSteps);\n            vec3.scaleAndAdd(pa, pa, up, (height * y) / heightSteps);\n\n            // Lower right corner.\n            vec3.scaleAndAdd(pb, pa, right, width / widthSteps);\n\n            // Upper right corner.\n            vec3.scaleAndAdd(pc, pb, up, height / heightSteps);\n\n            // Upper left corner.\n            vec3.scaleAndAdd(pd, pa, up, height / heightSteps);\n\n            // Store the six vertices of the two triangles composing this quad.\n            //positions.push(pa, pb, pc, pa, pc, pd);\n            const localQuadIndex = (x * heightSteps + y);\n            const vertexIndex = localQuadIndex * 4;\n            const vertexIndexComponent = vertexIndex * 3;\n            positions[vertexIndexComponent + 0] = pa[0];\n            positions[vertexIndexComponent + 1] = pa[1];\n            positions[vertexIndexComponent + 2] = pa[2];\n\n            positions[vertexIndexComponent + 3] = pb[0];\n            positions[vertexIndexComponent + 4] = pb[1];\n            positions[vertexIndexComponent + 5] = pb[2];\n\n            positions[vertexIndexComponent + 6] = pc[0];\n            positions[vertexIndexComponent + 7] = pc[1];\n            positions[vertexIndexComponent + 8] = pc[2];\n\n            positions[vertexIndexComponent + 9] = pd[0];\n            positions[vertexIndexComponent + 10] = pd[1];\n            positions[vertexIndexComponent + 11] = pd[2];\n\n            const triangleIndex = localQuadIndex * 6;\n            indices[triangleIndex + 0] = offsetVertexIndex + vertexIndex + 0;\n            indices[triangleIndex + 1] = offsetVertexIndex + vertexIndex + 2;\n            indices[triangleIndex + 2] = offsetVertexIndex + vertexIndex + 1;\n            indices[triangleIndex + 3] = offsetVertexIndex + vertexIndex + 0;\n            indices[triangleIndex + 4] = offsetVertexIndex + vertexIndex + 3;\n            indices[triangleIndex + 5] = offsetVertexIndex + vertexIndex + 2;\n        }\n    }\n}\n\nfunction generateFaceGrid(\n    start: vec3,\n    right: vec3,\n    up: vec3,\n    size: vec3,\n    radius: number,\n    resolution: number,\n    positions: Float32Array,\n    normals: Float32Array,\n    tangents: Float32Array,\n    uvs: Float32Array,\n    indices: Uint32Array,\n    uvIndex: number[],\n    faceIndex: number\n): void {\n    // Copy the grid generation and vertex processing logic here\n    // This is the same code as in the original grid function and face processing\n    // but working with local arrays instead of global ones\n    // ...\n    const numVerticesPerFace = positions.length / 3;\n\n    const width = vec3.length(vec3.multiply(vec3.create(), right, size));\n    const height = vec3.length(vec3.multiply(vec3.create(), up, size));\n\n    // scale the start point to the size of the face\n    start = vec3.multiply(vec3.create(), start, size);\n    grid(start, right, up, width, height, resolution, resolution, indices, positions, faceIndex, numVerticesPerFace);\n\n    // Calculate face normal by crossing right and up vectors\n    // const faceNormal = vec3.cross(vec3.create(), face.right, face.up);\n    // vec3.normalize(faceNormal, faceNormal);\n    {\n        // Pre-allocate all temporary vectors outside the loop\n        const position = vec3.create();\n        const normal = vec3.create();\n        const tangent = vec3.create();\n        const bitangent = vec3.create();\n        const clamped = vec3.create();\n\n        // Pre-calculate size values used in bounds check\n        const sizeHalf = vec3.scale(vec3.create(), size, 0.5);\n        const boundMaxVec = vec3.subtract(vec3.create(), sizeHalf, [radius, radius, radius]);\n        const boundMinVec = vec3.negate(vec3.create(), boundMaxVec);\n\n        // Direct array access for better performance\n        for (let i = 0; i < numVerticesPerFace; i++) {\n            const indexPos = i * 3;\n            const indexUv = i * 2;\n            const indexTangent = i * 4;\n\n            // Load position directly from array\n            position[0] = positions[indexPos];\n            position[1] = positions[indexPos + 1];\n            position[2] = positions[indexPos + 2];\n\n            // Rounding edges\n            // Clamp position to bounds\n            // if (false) {\n            vec3.max(clamped, boundMinVec, position);\n            vec3.min(clamped, boundMaxVec, clamped);\n\n            // Calculate normal and update position\n            vec3.subtract(normal, position, clamped);\n            vec3.normalize(normal, normal);\n            vec3.scaleAndAdd(position, clamped, normal, radius);\n            // }\n            // End of rounding edges\n\n            // Write position back to array\n            positions[indexPos] = position[0];\n            positions[indexPos + 1] = position[1];\n            positions[indexPos + 2] = position[2];\n\n            // Calculate UVs directly\n            uvs[indexUv] = (position[uvIndex[0]] / size[uvIndex[0]]) + 0.5;\n            uvs[indexUv + 1] = (position[uvIndex[1]] / size[uvIndex[1]]) + 0.5;\n\n            // Write normal\n            normals[indexPos] = normal[0];\n            normals[indexPos + 1] = normal[1];\n            normals[indexPos + 2] = normal[2];\n\n            // Calculate tangent more efficiently\n            vec3.copy(tangent, right);\n            vec3.normalize(tangent, tangent);\n            const dot = vec3.dot(tangent, normal);\n            vec3.scaleAndAdd(tangent, tangent, normal, -dot);\n            vec3.normalize(tangent, tangent);\n\n            // Calculate handedness with fewer operations\n            vec3.cross(bitangent, normal, tangent);\n            const handedness = vec3.dot(bitangent, up) > 0 ? 1.0 : -1.0;\n\n            // Write tangent\n            tangents[indexTangent] = tangent[0];\n            tangents[indexTangent + 1] = tangent[1];\n            tangents[indexTangent + 2] = tangent[2];\n            tangents[indexTangent + 3] = handedness;\n        }\n    }\n}\n// Set up message handler\nself.onmessage = async (e: MessageEvent<FaceData>) => {\n\n    // Wait for gl-matrix to be initialized\n    while (!vec3) {\n        // console.log(`[Worker ${self.name || 'unnamed'}] Waiting for gl-matrix initialization...`);\n        await new Promise(resolve => setTimeout(resolve, 10));\n    }\n    const startTiming = performance.now();\n\n    const {\n        start,\n        right,\n        up,\n        uvIndex,\n        size,\n        radius,\n        resolution,\n        faceIndex,\n        numVerticesPerFace,\n        numIndicesPerFace,\n        quantize\n    } = e.data;\n\n\n    // Convert arrays back to vec3\n    const startVec = vec3.fromValues(start[0], start[1], start[2]);\n    const rightVec = vec3.fromValues(right[0], right[1], right[2]);\n    const upVec = vec3.fromValues(up[0], up[1], up[2]);\n    const sizeVec = vec3.fromValues(size[0], size[1], size[2]);\n\n    // Create arrays for this face\n    const positions = new Float32Array(numVerticesPerFace * 3);\n    const normals = new Float32Array(numVerticesPerFace * 3);\n    const tangents = new Float32Array(numVerticesPerFace * 4);\n    const uvs = new Float32Array(numVerticesPerFace * 2);\n    const indices = new Uint32Array(numIndicesPerFace);\n\n\n    // Generate grid for this face\n    generateFaceGrid(\n        startVec, rightVec, upVec,\n        sizeVec, radius, resolution,\n        positions, normals, tangents, uvs, indices,\n        uvIndex, faceIndex\n    );\n\n    let mesh: Mesh = {\n        indices,\n        numVertices: numVerticesPerFace,\n        vertexBytes: 0,\n    };\n\n    const transfer = [indices.buffer];\n\n    if (quantize) {\n        let positionMax = vec3.scale(vec3.create(), sizeVec, 0.5);\n        let positionMin = vec3.negate(vec3.create(), positionMax);\n        const meshQuantized = quantizeMesh(numVerticesPerFace, positions, normals, tangents, uvs, positionMin, positionMax);\n        mesh.quantizedData = meshQuantized.compressedData;\n        mesh.positionMin = vec3.clone(positionMin);\n        mesh.positionMax = vec3.clone(positionMax);\n        mesh.vertexBytes = 16;\n        transfer.push(mesh.quantizedData.buffer);\n    } else {\n        mesh.positions = positions;\n        mesh.normals = normals;\n        mesh.tangents = tangents;\n        mesh.uvs = uvs;\n        mesh.vertexBytes = 3 * 4 + 3 * 4 + 4 * 4 + 2 * 4;\n        transfer.push(positions.buffer, normals.buffer, tangents.buffer, uvs.buffer);\n    }\n\n    const endTiming = performance.now();\n    const duration = (endTiming - startTiming).toFixed(2);\n    console.log(`Face generation time: ${duration} milliseconds`);\n\n    // Send the result back\n    self.postMessage({\n        faceIndex,\n        ...mesh,\n    }, {\n        transfer\n    });\n\n};\n"],"names":["EPSILON","ARRAY_TYPE","RANDOM","y","i","create","out","glMatrix.ARRAY_TYPE","clone","a","length","x","z","fromValues","copy","set","add","b","subtract","multiply","divide","ceil","floor","min","max","round","scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","len","dot","cross","ax","ay","az","bx","by","bz","lerp","hermite","c","d","t","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","random","r","glMatrix.RANDOM","zScale","transformMat4","m","w","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","rad","p","rotateY","rotateZ","angle","mag1","mag2","mag","cosine","zero","str","exactEquals","equals","a0","a1","a2","b0","b1","b2","glMatrix.EPSILON","sub","mul","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","l","encodeTangent","normal","tangent","tangentSign","normalCopy","vec3.clone","tangentCopy","vec3.normalize","tempVec","vec3.fromValues","bitangent","vec3.cross","vec3.create","cosAngle","vec3.dot","crossProduct","sinAngle","normalizedAngle","quantizedAngle","quantizeMesh","numVertices","positions","normals","tangents","uvs","compressedData","positionMin","positionMax","vec3.copy","range","vec3.sub","posIdx","tanIdx","uvIdx","outIdx","px","py","pz","encodedTangent","nx","ny","nz","invL1Norm","octX","octY","temp","vec3","index","grid","start","right","up","width","height","widthSteps","heightSteps","indices","faceIndex","numVerticesPerFace","offsetVertexIndex","pa","pb","pc","pd","localQuadIndex","vertexIndex","vertexIndexComponent","triangleIndex","generateFaceGrid","size","radius","resolution","uvIndex","position","clamped","sizeHalf","boundMaxVec","boundMinVec","indexPos","indexUv","indexTangent","handedness","e","resolve","startTiming","numIndicesPerFace","quantize","startVec","rightVec","upVec","sizeVec","mesh","transfer","meshQuantized","duration"],"mappings":"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","x_google_ignoreList":[0,1]}