{"version":3,"file":"index-voPHfvpD.js","sources":["../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/vec3.js"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();"],"names":["EPSILON","ARRAY_TYPE","RANDOM","y","i","create","out","glMatrix.ARRAY_TYPE","clone","a","length","x","z","fromValues","copy","set","add","b","subtract","multiply","divide","ceil","floor","min","max","round","scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","len","dot","cross","ax","ay","az","bx","by","bz","lerp","t","hermite","c","d","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","random","r","glMatrix.RANDOM","zScale","transformMat4","m","w","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","rad","p","rotateY","rotateZ","angle","mag1","mag2","mag","cosine","zero","str","exactEquals","equals","a0","a1","a2","b0","b1","b2","glMatrix.EPSILON","sub","mul","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","l"],"mappings":"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","x_google_ignoreList":[0,1]}