{"version":3,"file":"wavySphereWorker-C---qc9g.js","sources":["../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/mat3.js","../node_modules/gl-matrix/esm/mat4.js","../node_modules/gl-matrix/esm/vec3.js","../node_modules/gl-matrix/esm/vec4.js","../node_modules/gl-matrix/esm/quat.js","../src/tangentEncoding.ts","../src/quantize.ts","../src/wavySphereWorker.ts"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import { vec3, vec4 } from 'gl-matrix';\nimport { TempVars, encodeQuaternion12Bits, decodeQuaternion12Bits, encodeQuaternion16Bits, decodeQuaternion16Bits, encodeQuaternion8Bits, decodeQuaternion8Bits } from './quantize';\n\n/**\n * Encodes a tangent vector into a 16-bit value using normal and tangent vectors\n * Returns a 16-bit number where:\n * - Bits 0-14: Quantized angle (15 bits)\n * - Bit 15: Tangent sign (1 bit)\n */\nexport function encodeTangentAsAngle16(\n    normal: vec3,\n    tangent: vec3,\n    tangentSign: number\n): number {\n    // Create copies to avoid modifying input vectors\n    const normalCopy = vec3.clone(normal);\n    const tangentCopy = vec3.clone(tangent);\n\n    // Ensure vectors are normalized\n    vec3.normalize(normalCopy, normalCopy);\n    vec3.normalize(tangentCopy, tangentCopy);\n\n    // Calculate initial bitangent\n    const tempVec = Math.abs(normalCopy[0]) < 0.9 ?\n        vec3.fromValues(1, 0, 0) :\n        vec3.fromValues(0, 1, 0);\n    const bitangent = vec3.cross(vec3.create(), normalCopy, tempVec);\n    vec3.normalize(bitangent, bitangent);\n\n    // Calculate angle between tangent and bitangent\n    const cosAngle = vec3.dot(tangentCopy, bitangent);\n    const crossProduct = vec3.cross(vec3.create(), bitangent, tangentCopy);\n    const sinAngle = vec3.dot(crossProduct, normalCopy);\n    const angle = Math.atan2(sinAngle, cosAngle);\n\n    // Normalize angle to [0,1] range\n    const normalizedAngle = (angle + Math.PI) / (2 * Math.PI);\n\n    // Quantize to 15 bits (0-32767)\n    const quantizedAngle = Math.round(normalizedAngle * 32767) & 0x7FFF;\n\n    // Combine with sign bit\n    const sign = tangentSign > 0 ? 1 : 0;\n    return (sign << 15) | quantizedAngle;\n}\n\n/**\n * Fast polynomial approximation for sine\n * Max error < 0.001 for range [-π, π]\n */\nfunction fastSin(x: number): number {\n    // Wrap x to [-π, π]\n    x = x % (2 * Math.PI);\n    if (x > Math.PI) x -= 2 * Math.PI;\n    else if (x < -Math.PI) x += 2 * Math.PI;\n\n    // Coefficients for polynomial approximation\n    const a3 = -0.16666667;  // -1/6\n    const a5 = 0.008333333;  // 1/120\n    const a7 = -0.000198413; // -1/5040\n\n    const x2 = x * x;\n    const x3 = x2 * x;\n\n    return x + a3 * x3 + a5 * x3 * x2 + a7 * x3 * x2 * x2;\n}\n\n/**\n * Fast polynomial approximation for cosine using sin(x + π/2)\n * Max error < 0.001 for range [-π, π]\n */\nfunction fastCos(x: number): number {\n    return fastSin(x + Math.PI / 2);\n}\n\n/**\n * Optimized tangent decoder using polynomial approximations\n */\nexport function decodeAngleAsTangent16(\n    encoded: number,\n    normal: vec3\n): [vec3, number] {\n    // Create a copy of the normal\n    const normalCopy = vec3.clone(normal);\n    vec3.normalize(normalCopy, normalCopy);\n\n    // Extract sign and angle\n    const sign = ((encoded >> 15) & 1) * 2 - 1;\n    const quantizedAngle = encoded & 0x7FFF;\n\n    // Convert back to radians\n    const angle = (quantizedAngle / 32767) * (2 * Math.PI) - Math.PI;\n\n    // Calculate initial bitangent\n    const tempVec = Math.abs(normalCopy[0]) < 0.9 ?\n        vec3.fromValues(1, 0, 0) :\n        vec3.fromValues(0, 1, 0);\n    const bitangent = vec3.cross(vec3.create(), normalCopy, tempVec);\n    vec3.normalize(bitangent, bitangent);\n\n    // Get sine and cosine values using polynomial approximation\n    const cosAngle = Math.cos(angle);\n    const sinAngle = Math.sin(angle);\n\n    // Rotate bitangent around normal\n    const tangent = vec3.create();\n    const rotatedBitangent = vec3.create();\n    vec3.scale(tangent, bitangent, cosAngle);\n    vec3.cross(rotatedBitangent, normalCopy, bitangent);\n    vec3.scaleAndAdd(tangent, tangent, rotatedBitangent, sinAngle);\n    vec3.normalize(tangent, tangent);\n\n    return [tangent, sign];\n}\n\n/**\n * Optimized tangent decoder using polynomial approximations\n */\nexport function decodeAngleAsTangentUsingPolynomialApproximation16(\n    encoded: number,\n    normal: vec3\n): [vec3, number] {\n    // Create a copy of the normal\n    const normalCopy = vec3.clone(normal);\n    vec3.normalize(normalCopy, normalCopy);\n\n    // Extract sign and angle\n    const sign = ((encoded >> 15) & 1) * 2 - 1;\n    const quantizedAngle = encoded & 0x7FFF;\n\n    // Convert back to radians\n    const angle = (quantizedAngle / 32767) * (2 * Math.PI) - Math.PI;\n\n    // Calculate initial bitangent\n    const tempVec = Math.abs(normalCopy[0]) < 0.9 ?\n        vec3.fromValues(1, 0, 0) :\n        vec3.fromValues(0, 1, 0);\n    const bitangent = vec3.cross(vec3.create(), normalCopy, tempVec);\n    vec3.normalize(bitangent, bitangent);\n\n    // Get sine and cosine values using polynomial approximation\n    const cosAngle = fastCos(angle);\n    const sinAngle = fastSin(angle);\n\n    // Rotate bitangent around normal\n    const tangent = vec3.create();\n    const rotatedBitangent = vec3.create();\n    vec3.scale(tangent, bitangent, cosAngle);\n    vec3.cross(rotatedBitangent, normalCopy, bitangent);\n    vec3.scaleAndAdd(tangent, tangent, rotatedBitangent, sinAngle);\n    vec3.normalize(tangent, tangent);\n\n    return [tangent, sign];\n}\n\n// Test function to verify encoding/decoding functions with their repsective error\nexport function testTangentEncoding(\n    normal: vec3,\n    tangent: vec4,\n): void {\n    const temps = TempVars;\n    const originalSign = tangent[3];\n    const tangentSign = tangent;\n\n    // Encode\n    // @ts-ignore\n    const angleTangent = encodeTangentAsAngle16(normal, tangent, originalSign);\n    const encodedQuaternion12 = encodeQuaternion12Bits(new Uint16Array(3), normal, tangentSign, temps);\n    const encodedQuaternion16 = encodeQuaternion16Bits(new Uint16Array(4), normal, tangentSign, temps);\n    const encodedQuaternion8 = encodeQuaternion8Bits(new Uint16Array(2), normal, tangentSign, temps);\n    // Decode\n    const [decodedAngleTangent, decodedAngleTangentSign] = decodeAngleAsTangent16(angleTangent, normal);\n    const [decodedAngleTangentOptimized, decodedAngleTangentOptimizedSign] = decodeAngleAsTangentUsingPolynomialApproximation16(angleTangent, normal);\n    const { normal: qNormal12, tangent: qTangent12 } = decodeQuaternion12Bits(encodedQuaternion12, temps);\n    const { normal: qNormal16, tangent: qTangent16 } = decodeQuaternion16Bits(encodedQuaternion16, temps);\n    const { normal: qNormal8, tangent: qTangent8 } = decodeQuaternion8Bits(encodedQuaternion8, temps);\n\n    // Format a vector for display\n    const formatVec3 = (v: vec3): string => `[${v[0].toFixed(4)}, ${v[1].toFixed(4)}, ${v[2].toFixed(4)}]`;\n    const formatVec4 = (v: vec4): string => `[${v[0].toFixed(4)}, ${v[1].toFixed(4)}, ${v[2].toFixed(4)}, ${v[3].toFixed(4)}]`;\n\n    function computeErrorAngle(direction: vec4 | vec3, originalDirection: vec3): number {\n        // @ts-ignore\n        const dotProduct = vec3.dot(direction, originalDirection);\n        const angleError = Math.acos(Math.min(1, Math.max(-1, dotProduct)));\n        return angleError;\n    }\n\n    function crytekCheckError(tangent: vec4, normal: vec3, qTangent: vec4, qNormal: vec3): { angleError: number, angleErrorNormal: number } {\n        // @ts-ignore\n        const angleError = computeErrorAngle(tangent, qTangent);\n        console.log(`  Decoded tangent+sign: ${formatVec4(qTangent)}`);\n        console.log(`  Angle error: ${formatAngleError(angleError)}`);\n        const angleErrorNormal = computeErrorAngle(normal, qNormal);\n        console.log(`  Decoded normal: ${formatVec3(qNormal)}`);\n        console.log(`  Normal angle error: ${formatAngleError(angleErrorNormal)}`);\n\n        return { angleError, angleErrorNormal };\n    }\n\n    // Format angle error in both radians and degrees\n    const formatAngleError = (radians: number): string =>\n        `${radians.toFixed(6)} rad (${(radians * 180 / Math.PI).toFixed(4)}°)`;\n\n    console.log('\\n=== TANGENT ENCODING TEST RESULTS ===');\n    console.log(`Original vectors:`);\n    console.log(`  Normal: ${formatVec3(normal)}`);\n    console.log(`  Tangent+Sign: ${formatVec4(tangent)}`);\n\n    console.log('\\n1. ANGLE AS TANGENT ENCODING:');\n    const angleError = computeErrorAngle(tangent, decodedAngleTangent);\n    console.log(`  Decoded tangent+sign: ${formatVec4(vec4.fromValues(decodedAngleTangent[0], decodedAngleTangent[1], decodedAngleTangent[2], decodedAngleTangentSign))}`);\n    console.log(`  Angle error: ${formatAngleError(angleError)}`);\n    console.log(`  Sign preserved: ${originalSign === decodedAngleTangentSign ? '✓' : '✗'}`);\n\n    console.log('\\n2. ANGLE AS TANGENT USING POLYNOMIAL APPROXIMATION ENCODING:');\n    const angleErrorOptimized = computeErrorAngle(tangent, decodedAngleTangentOptimized);\n    console.log(`  Decoded tangent+sign: ${formatVec4(vec4.fromValues(decodedAngleTangentOptimized[0], decodedAngleTangentOptimized[1], decodedAngleTangentOptimized[2], decodedAngleTangentOptimizedSign))}`);\n    console.log(`  Angle error: ${formatAngleError(angleErrorOptimized)}`);\n    console.log(`  Sign preserved: ${originalSign === decodedAngleTangentOptimizedSign ? '✓' : '✗'}`);\n\n    console.log('\\n3. CRYTEK QTangent 12-BIT ENCODING:');\n    const { angleError: angleError12, angleErrorNormal: angleErrorNormal12 } = crytekCheckError(tangent, normal, qTangent12, qNormal12);\n\n    console.log('\\n4. CRYTEK QTangent 16-BIT ENCODING:');\n    const { angleError: angleError16, angleErrorNormal: angleErrorNormal16 } = crytekCheckError(tangent, normal, qTangent16, qNormal16);\n\n    console.log('\\n5. CRYTEK QTangent 8-BIT ENCODING:');\n    const { angleError: angleError8, angleErrorNormal: angleErrorNormal8 } = crytekCheckError(tangent, normal, qTangent8, qNormal8);\n\n    // Summary table\n    console.log('\\n=== SUMMARY ===');\n    console.log('Method                        | Tangent Error          | Normal Error           | Sign');\n    console.log('------------------------------|------------------------|------------------------|-------');\n    console.log(`Angle as tangent 16bits       | ${formatAngleError(angleError).padEnd(17)} | N/A                    | ${originalSign === decodedAngleTangentSign ? '✓' : '✗'}`);\n    console.log(`Angle as tangent approx 16bits| ${formatAngleError(angleErrorOptimized).padEnd(17)} | N/A                    | ${originalSign === decodedAngleTangentOptimizedSign ? '✓' : '✗'}`);\n    console.log(`Crytek Quaternion 12bits      | ${formatAngleError(angleError12).padEnd(17)} | ${formatAngleError(angleErrorNormal12).padEnd(17)} | ${Math.sign(qTangent12[3]) === originalSign ? '✓' : '✗'}`);\n    console.log(`Crytek Quaternion 16bits      | ${formatAngleError(angleError16).padEnd(17)} | ${formatAngleError(angleErrorNormal16).padEnd(17)} | ${Math.sign(qTangent16[3]) === originalSign ? '✓' : '✗'}`);\n    console.log(`Crytek Quaternion 8bits       | ${formatAngleError(angleError8).padEnd(17)} | ${formatAngleError(angleErrorNormal8).padEnd(17)} | ${Math.sign(qTangent8[3]) === originalSign ? '✓' : '✗'}`);\n}\n// Example usage\n// const normal = vec3.fromValues(0, 1, 0);\n// const tangent = vec3.fromValues(1, 0, 0);\n// const originalSign = 1;\n\n// Let's test the encoding for a specific vertex (e.g., at lat=45°, lon=30°)\n// const normal = vec3.fromValues(0.6124, 0.7071, 0.3536);\n// const tangent = vec3.fromValues(-0.5000, 0.0000, 0.8660);\n// const originalSign = 1.0;\n\n// Test the encoding/decoding after initializing the temp vars\n// setTimeout(() => {\n//     testTangentEncoding(normal, tangent, originalSign);\n// }, 0);\n","import { vec3, vec4, quat, mat4, mat3 } from 'gl-matrix';\nimport { encodeTangentAsAngle16 } from './tangentEncoding';\n\nexport interface QuantizedMesh {\n    compressedData: Uint16Array;\n    indices: Uint32Array;\n    positionMin: vec3;\n    positionMax: vec3;\n    vertexBytes: number;\n}\n\nexport enum QuantizationFormat {\n    Uncompressed = 'none',\n    Angle16Bits = 'angle16bits',  // Current format: 16-bit octahedral normals, 16-bit tangent angle\n    //    Compact12Bit = 'compact12bit',    // New format: 12-bit octahedral for both normal and tangent\n    Quaternion12Bits = 'quaternion12bits' // New format: 12-bit quaternion for normal+tangent frame\n}\n\ninterface QuantizedAttributes {\n    compressedData: Uint16Array;\n    positionMin: vec3;\n    positionMax: vec3;\n}\n\n// - Positions: 3x16bits (quantized on mesh bounding box)\n// - Normals: 2x16bits (octahedral encoding)\n// - Tangents: 1x16bits (1 bit sign + 15 bits angle)\n// - UVs: 2x16bits (quantized 0-1 range)\n// Total: 8x16bits per vertex (16 bytes)\nexport function quantizeMeshAngle16Bits(numVertices: number, positions: Float32Array, normals: Float32Array, tangents: Float32Array, uvs: Float32Array, min: vec3 | null, max: vec3 | null): QuantizedAttributes {\n    const compressedData = new Uint16Array(numVertices * 8); // 4 vec2 per vertex or 8x16bits\n\n    const positionMin = vec3.fromValues(Infinity, Infinity, Infinity);\n    const positionMax = vec3.fromValues(-Infinity, -Infinity, -Infinity);\n    if (!min || !max) {\n        // Find position bounds\n        for (let i = 0; i < positions.length; i += 3) {\n            positionMin[0] = Math.min(positionMin[0], positions[i]);\n            positionMin[1] = Math.min(positionMin[1], positions[i + 1]);\n            positionMin[2] = Math.min(positionMin[2], positions[i + 2]);\n            positionMax[0] = Math.max(positionMax[0], positions[i]);\n            positionMax[1] = Math.max(positionMax[1], positions[i + 1]);\n            positionMax[2] = Math.max(positionMax[2], positions[i + 2]);\n        }\n    } else {\n        vec3.copy(positionMin, min);\n        vec3.copy(positionMax, max);\n    }\n    // Quantize positions to 16 bits\n    const range = vec3.sub(vec3.create(), positionMax, positionMin);\n    for (let i = 0; i < numVertices; i++) {\n        const posIdx = i * 3;\n        const tanIdx = i * 4;\n        const uvIdx = i * 2;\n        const outIdx = i * 8;\n\n        // Quantize positions to 16 bits\n        const px = (positions[posIdx] - positionMin[0]) / range[0];\n        const py = (positions[posIdx + 1] - positionMin[1]) / range[1];\n        const pz = (positions[posIdx + 2] - positionMin[2]) / range[2];\n\n        compressedData[outIdx] = px * 65535;\n        compressedData[outIdx + 1] = py * 65535;\n\n        // Encode position.z and tangent angle+sign\n        compressedData[outIdx + 2] = pz * 65535;\n\n        // Calculate tangent angle\n        const normal = vec3.fromValues(normals[posIdx], normals[posIdx + 1], normals[posIdx + 2]);\n        const tangent = vec3.fromValues(tangents[tanIdx], tangents[tanIdx + 1], tangents[tanIdx + 2]);\n        const tangentSign = tangents[tanIdx + 3] > 0 ? 1 : 0;\n\n        const encodedTangent = encodeTangentAsAngle16(normal, tangent, tangentSign);\n        //const decodedTangent = decodeTangent(encodedTangent, normal);\n\n        compressedData[outIdx + 3] = encodedTangent;\n\n        // Encode normal using octahedral encoding\n        const nx = normals[posIdx];\n        const ny = normals[posIdx + 1];\n        const nz = normals[posIdx + 2];\n        const invL1Norm = 1 / (Math.abs(nx) + Math.abs(ny) + Math.abs(nz));\n\n        let octX = nx * invL1Norm;\n        let octY = ny * invL1Norm;\n\n        if (nz < 0) {\n            const temp = octX;\n            octX = (1 - Math.abs(octY)) * (octX >= 0 ? 1 : -1);\n            octY = (1 - Math.abs(temp)) * (octY >= 0 ? 1 : -1);\n        }\n\n        compressedData[outIdx + 4] = ((octX * 0.5 + 0.5) * 65535) | 0;\n        compressedData[outIdx + 5] = ((octY * 0.5 + 0.5) * 65535) | 0;\n        //------------------------------------------------------------\n\n        // Quantize UVs to 16 bits\n        compressedData[outIdx + 6] = (uvs[uvIdx] * 65535) | 0;\n        compressedData[outIdx + 7] = (uvs[uvIdx + 1] * 65535) | 0;\n    }\n\n    return {\n        compressedData,\n        positionMin,\n        positionMax,\n    };\n}\n\n// - Positions: 3x16bits (quantized on mesh bounding box)\n// - qTangents: 3x16bits (12-bit quaternion for normal+tangent frame)\n// - UVs: 2x16bits (quantized 0-1 range)\n// Total: 8x16bits per vertex (16 bytes)\nexport function quantizeMeshQuaternion12Bits(numVertices: number, positions: Float32Array, normals: Float32Array, tangents: Float32Array, uvs: Float32Array, min: vec3 | null, max: vec3 | null): QuantizedAttributes {\n    const compressedData = new Uint16Array(numVertices * 8); // 4 vec2 per vertex or 8x16bits\n\n    const positionMin = vec3.fromValues(Infinity, Infinity, Infinity);\n    const positionMax = vec3.fromValues(-Infinity, -Infinity, -Infinity);\n    if (!min || !max) {\n        // Find position bounds\n        for (let i = 0; i < positions.length; i += 3) {\n            positionMin[0] = Math.min(positionMin[0], positions[i]);\n            positionMin[1] = Math.min(positionMin[1], positions[i + 1]);\n            positionMin[2] = Math.min(positionMin[2], positions[i + 2]);\n            positionMax[0] = Math.max(positionMax[0], positions[i]);\n            positionMax[1] = Math.max(positionMax[1], positions[i + 1]);\n            positionMax[2] = Math.max(positionMax[2], positions[i + 2]);\n        }\n    } else {\n        vec3.copy(positionMin, min);\n        vec3.copy(positionMax, max);\n    }\n    const range = vec3.sub(vec3.create(), positionMax, positionMin);\n    const qTangent12 = new Uint16Array(numVertices * 3);\n    const vec4Tmp = vec4.create();\n    for (let i = 0; i < numVertices; i++) {\n        const posIdx = i * 3;\n        const tanIdx = i * 4;\n        const uvIdx = i * 2;\n        const outIdx = i * 8;\n\n        // Quantize positions to 16 bits\n        const px = (positions[posIdx] - positionMin[0]) / range[0];\n        const py = (positions[posIdx + 1] - positionMin[1]) / range[1];\n        const pz = (positions[posIdx + 2] - positionMin[2]) / range[2];\n\n        compressedData[outIdx] = px * 65535;\n        compressedData[outIdx + 1] = py * 65535;\n\n        // Encode position.z and tangent angle+sign\n        compressedData[outIdx + 2] = pz * 65535;\n\n        // Calculate tangent angle\n        const normal = vec3.fromValues(normals[posIdx], normals[posIdx + 1], normals[posIdx + 2]);\n        const tangent = vec3.fromValues(tangents[tanIdx], tangents[tanIdx + 1], tangents[tanIdx + 2]);\n        const tangentSign = tangents[tanIdx + 3] > 0 ? 1 : 0;\n\n        vec4.set(vec4Tmp, tangent[0], tangent[1], tangent[2], tangentSign);\n        encodeQuaternion12Bits(qTangent12, normal, vec4Tmp, TempVars);\n\n        compressedData[outIdx + 3] = qTangent12[0];\n        compressedData[outIdx + 4] = qTangent12[1];\n        compressedData[outIdx + 5] = qTangent12[2];\n\n        // Quantize UVs to 16 bits\n        compressedData[outIdx + 6] = (uvs[uvIdx] * 65535) | 0;\n        compressedData[outIdx + 7] = (uvs[uvIdx + 1] * 65535) | 0;\n    }\n\n    return {\n        compressedData,\n        positionMin,\n        positionMax,\n    };\n}\n\n// Store 4 values of 12 bits each into 3 16-bit values\nfunction store4x12To3x16(out: Uint16Array, a: number, b: number, c: number, d: number): Uint16Array {\n    // First 16 bits: all of a (12 bits) and first 4 bits of b\n    const first = (a & 0xFFF) | ((b & 0xF) << 12);\n    // Second 16 bits: last 8 bits of b and first 8 bits of c\n    const second = ((b >> 4) & 0xFF) | ((c & 0xFF) << 8);\n    // Third 16 bits: last 4 bits of c and all of d (12 bits)\n    const third = ((c >> 8) & 0xF) | ((d & 0xFFF) << 4);\n    out[0] = first;\n    out[1] = second;\n    out[2] = third;\n    return out;\n}\n\n// Extract 4 12-bit values from 3 16-bit values\nfunction load4x12From3x16(out: vec4, a: number, b: number, c: number): vec4 {\n    // Extract first 12-bit value (all from first 12 bits of a)\n    out[0] = a & 0xFFF;\n\n    // Extract second 12-bit value (4 bits from a, 8 bits from b)\n    out[1] = ((a >> 12) & 0xF) | ((b & 0xFF) << 4);\n\n    // Extract third 12-bit value (8 bits from b, 4 bits from c)\n    out[2] = ((b >> 8) & 0xFF) | ((c & 0xF) << 8);\n\n    // Extract fourth 12-bit value (all from last 12 bits of c)\n    out[3] = (c >> 4) & 0xFFF;\n\n    return out;\n}\n\n// Store 4 values of 8 bits each into 2 16-bit values\nfunction store4x8To2x16(out: Uint16Array, a: number, b: number, c: number, d: number): Uint16Array {\n    const first = (a & 0xFF) | ((b & 0xFF) << 8);\n    const second = (c & 0xFF) | ((d & 0xFF) << 8);\n    out[0] = first;\n    out[1] = second;\n    return out;\n}\n\n// Extract 4 8-bit values from 2 16-bit values\nfunction load4x8From2x16(out: vec4, a: number, b: number): vec4 {\n    out[0] = (a & 0xFF);\n    out[1] = (a >> 8) & 0xFF;\n    out[2] = (b & 0xFF);\n    out[3] = (b >> 8) & 0xFF;\n    return out;\n}\n\n// Convert float in [-1,1] to integer with n bits\nfunction quantizeSignedFloat(value: number, bits: number): number {\n    const maxValue = (1 << bits) - 1;\n    return Math.round((value * 0.5 + 0.5) * maxValue);\n}\n\n// Convert n-bit integer back to float in [-1,1]\nfunction unquantizeSignedFloat(value: number, bits: number): number {\n    const maxValue = (1 << bits) - 1;\n    return (value / maxValue) * 2.0 - 1.0;\n}\n\n// Quantize a quaternion to 12 bits per component and store in 3 16-bit values\nfunction packQuaternion12BitsTo16Bits(out: Uint16Array, a: number, b: number, c: number, d: number): Uint16Array {\n    // Quantize quaternion components to 12 bits\n    const q0 = quantizeSignedFloat(a, 12);\n    const q1 = quantizeSignedFloat(b, 12);\n    const q2 = quantizeSignedFloat(c, 12);\n    const q3 = quantizeSignedFloat(d, 12);\n\n    return store4x12To3x16(out, q0, q1, q2, q3);\n}\n\nfunction unpackQuaternion12Bits(out: quat, a: number, b: number, c: number): quat {\n    const q = out;\n    load4x12From3x16(q, a, b, c);\n    q[0] = unquantizeSignedFloat(q[0], 12);\n    q[1] = unquantizeSignedFloat(q[1], 12);\n    q[2] = unquantizeSignedFloat(q[2], 12);\n    q[3] = unquantizeSignedFloat(q[3], 12);\n    quat.normalize(out, q);\n    return out;\n}\n\nfunction toMat3(out: mat3, c00: number, c01: number, c02: number, c10: number, c11: number, c12: number, c20: number, c21: number, c22: number) {\n    out[0] = c00;\n    out[1] = c01;\n    out[2] = c02;\n    out[3] = c10;\n    out[4] = c11;\n    out[5] = c12;\n    out[6] = c20;\n    out[7] = c21;\n    out[8] = c22;\n    return out;\n}\n\nfunction toNormal(out: vec3, q: quat, temps: TempVars) {\n    // Create local vectors instead of using global ones\n    const F0 = temps.F0;\n    const F1 = temps.F1;\n    const F2 = temps.F2;\n\n    const n1 = temps.TMP1;\n    const n2 = temps.TMP2;\n    const tmp = temps.TMP0;\n\n    // n1 = F1 * q[0] * [q[2], q[3], q[0]]\n    vec3.scale(n1, F1, q[0]);\n    vec3.multiply(n1, n1, vec3.set(tmp, q[2], q[3], q[0]));\n\n    // n2 = F2 * q[1] * [q[3], q[2], q[1]]\n    vec3.scale(n2, F2, q[1]);\n    vec3.multiply(n2, n2, vec3.set(tmp, q[3], q[2], q[1]));\n\n    // out = F0 + n1 + n2\n    vec3.add(out, F0, n1);\n    vec3.add(out, out, n2);\n}\n\n\n// Create a class to manage temporary variables\ninterface TempVars {\n    TMP0: vec3;\n    TMP1: vec3;\n    TMP2: vec3;\n    MAT0: mat4;\n    F0: vec3;\n    F1: vec3;\n    F2: vec3;\n    Q0: vec3;\n    Q1: vec3;\n    Q2: vec3;\n    qTangent: quat;\n    qTangent12: Uint16Array;\n}\n\nexport const TempVars: TempVars = {\n    TMP0: vec3.create(),\n    TMP1: vec3.create(),\n    TMP2: vec3.create(),\n    MAT0: mat4.create(),\n    F0: vec3.fromValues(0.0, 0.0, 1.0),\n    F1: vec3.fromValues(2.0, -2.0, -2.0),\n    F2: vec3.fromValues(2.0, 2.0, -2.0),\n    Q0: vec3.fromValues(1, 0, 0),\n    Q1: vec3.fromValues(-2, 2, -2),\n    Q2: vec3.fromValues(-2, 2, 2),\n    qTangent: quat.create(),\n    qTangent12: new Uint16Array(3),\n};\n\n// encode norma and tangent into a qTangent frame\n// numStorageBits is needed to asdjust the bias, but the encoding of the number of bits is not done here\nfunction encodeQTangent(out: quat, n: vec3, t: vec4, temps: TempVars, numStorageBits: number): quat {\n    // @ts-ignore\n    const c = vec3.cross(temps.TMP0, n, t);\n    // @ts-ignore\n    const mat = toMat3(temps.MAT0, t[0], t[1], t[2], c[0], c[1], c[2], n[0], n[1], n[2]);\n    quat.fromMat3(out, mat);\n    quat.normalize(out, out);\n\n    // positive\n    if (out[3] < 0) {\n        quat.scale(out, out, -1);\n    }\n\n    // Ensure w is never 0.0\n    // Bias is 2^(nb_bits - 1) - 1\n    // const storageSize = 2; //sizeof(int16_t)\n    // const CHAR_BIT = 8;\n    // const bias = 1 / ((1 << (storageSize * CHAR_BIT - 1)) - 1);\n    const bias = 1 / ((1 << (numStorageBits - 1)) - 1);\n    if (out[3] < bias) {\n        out[3] = bias;\n        const factor = Math.sqrt(1.0 - bias * bias);\n        out[0] *= factor;\n        out[1] *= factor;\n        out[2] *= factor;\n    }\n\n    // @ts-ignore\n    const b = t[3] > 0 ? vec3.cross(temps.TMP1, t, n) : vec3.cross(temps.TMP1, n, t);\n\n    // If there's a reflection ((n x t) . b <= 0), make sure w is negative\n    // @ts-ignore\n    const cc = vec3.cross(temps.TMP2, t, n);\n    if (vec3.dot(cc, b) < 0) {\n        quat.scale(out, out, -1);\n    }\n    return out;\n}\n\n// encode normal and tangent into 12-bit quaternion packed into 3x16bits\nexport function encodeQuaternion12Bits(out: Uint16Array, n: vec3, t: vec4, temps: TempVars): Uint16Array {\n    const q = encodeQTangent(temps.qTangent, n, t, temps, 12);\n    return packQuaternion12BitsTo16Bits(out, q[0], q[1], q[2], q[3]);\n}\n\nexport function decodeQuaternion12Bits(q12: Uint16Array, temps: TempVars): { normal: vec3, tangent: vec4 } {\n    const q = unpackQuaternion12Bits(quat.create(), q12[0], q12[1], q12[2]);\n    return decodeQTangent(q, temps);\n}\n\n// encode normal and tangent into 16-bit quaternion packed into 4x16bits\nexport function encodeQuaternion16Bits(out: Uint16Array, n: vec3, t: vec4, temps: TempVars): Uint16Array {\n    const q = encodeQTangent(temps.qTangent, n, t, temps, 16);\n    // Quantize quaternion components to 16 bits\n    out[0] = quantizeSignedFloat(q[0], 16);\n    out[1] = quantizeSignedFloat(q[1], 16);\n    out[2] = quantizeSignedFloat(q[2], 16);\n    out[3] = quantizeSignedFloat(q[3], 16);\n    return out;\n}\n\nexport function decodeQuaternion16Bits(q: Uint16Array, temps: TempVars): { normal: vec3, tangent: vec4 } {\n    const qQuat = quat.fromValues(\n        unquantizeSignedFloat(q[0], 16),\n        unquantizeSignedFloat(q[1], 16),\n        unquantizeSignedFloat(q[2], 16),\n        unquantizeSignedFloat(q[3], 16));\n    quat.normalize(qQuat, qQuat);\n    return decodeQTangent(qQuat, temps);\n}\n\n// encode normal and tangent into 8-bit quaternion packed into 2x16bits\nexport function encodeQuaternion8Bits(out: Uint16Array, n: vec3, t: vec4, temps: TempVars): Uint16Array {\n    const q = encodeQTangent(temps.qTangent, n, t, temps, 8);\n    // Quantize quaternion components to 8 bits\n    const q0 = quantizeSignedFloat(q[0], 8);\n    const q1 = quantizeSignedFloat(q[1], 8);\n    const q2 = quantizeSignedFloat(q[2], 8);\n    const q3 = quantizeSignedFloat(q[3], 8);\n    return store4x8To2x16(out, q0, q1, q2, q3);\n}\n\nexport function decodeQuaternion8Bits(q: Uint16Array, temps: TempVars): { normal: vec3, tangent: vec4 } {\n    let qQuat = quat.create();\n    load4x8From2x16(qQuat, q[0], q[1]);\n    qQuat = quat.fromValues(\n        unquantizeSignedFloat(qQuat[0], 8),\n        unquantizeSignedFloat(qQuat[1], 8),\n        unquantizeSignedFloat(qQuat[2], 8),\n        unquantizeSignedFloat(qQuat[3], 8));\n    quat.normalize(qQuat, qQuat);\n    return decodeQTangent(qQuat, temps);\n}\n\n/**\n * Extracts the normal and tangent vectors of the tangent frame encoded in the\n * specified quaternion.\n */\nfunction decodeQTangent(q: quat, temps: TempVars): { normal: vec3, tangent: vec4 } {\n    const n = vec3.create();\n    const t = vec4.create();\n    toNormal(n, q, temps);\n\n    const t0 = temps.Q0;\n    const t1 = vec3.scale(temps.TMP0, temps.Q1, q[1]);\n    vec3.multiply(t1, t1, vec3.set(temps.TMP1, q[1], q[0], q[3]));\n    const t2 = vec3.scale(temps.TMP2, temps.Q2, q[2]);\n    vec3.multiply(t2, t2, vec3.set(temps.TMP1, q[2], q[3], q[0]));\n\n    // @ts-ignore\n    vec3.add(t, t0, t1);\n    // @ts-ignore\n    vec3.add(t, t, t2);\n    t[3] = q[3] > 0 ? 1 : -1;\n    return { normal: n, tangent: t };\n}","import { quantizeMeshAngle16Bits, quantizeMeshQuaternion12Bits, QuantizationFormat } from './quantize';\n\ninterface WavySphereData {\n    resolution: number;\n    quantizationFormat: QuantizationFormat;\n}\n\n// Import quantizeMesh dynamically to ensure it's loaded before use\nself.onmessage = async (e: MessageEvent<WavySphereData>) => {\n    const start = performance.now();\n    const { resolution, quantizationFormat } = e.data;\n\n    const numVertices = (resolution + 1) * (resolution + 1);\n    const positions = new Float32Array(numVertices * 3);\n    const normals = new Float32Array(numVertices * 3);\n    const tangents = new Float32Array(numVertices * 4);\n    const uvs = new Float32Array(numVertices * 2);\n    const indices = new Uint32Array(resolution * resolution * 6);\n\n    const waves = 8;  // Number of waves\n    const amplitude = 0.2;  // Wave height\n\n    let index = 0;\n    for (let lat = 0; lat <= resolution; lat++) {\n        const theta = (lat * Math.PI) / resolution;\n        const sinTheta = Math.sin(theta);\n        const cosTheta = Math.cos(theta);\n\n        for (let lon = 0; lon <= resolution; lon++) {\n            const phi = (lon * 2 * Math.PI) / resolution;\n            const sinPhi = Math.sin(phi);\n            const cosPhi = Math.cos(phi);\n\n            // Add wavy displacement\n            const wave = 1 + amplitude * Math.sin(waves * phi) * Math.sin(waves * theta);\n\n            // Position\n            const x = cosPhi * sinTheta * wave;\n            const y = cosTheta * wave;\n            const z = sinPhi * sinTheta * wave;\n\n            positions[index * 3] = x;\n            positions[index * 3 + 1] = y;\n            positions[index * 3 + 2] = z;\n\n            // Calculate normal (more complex due to displacement)\n            const nx = cosPhi * sinTheta;\n            const ny = cosTheta;\n            const nz = sinPhi * sinTheta;\n            const nl = Math.sqrt(nx * nx + ny * ny + nz * nz);\n            normals[index * 3] = nx / nl;\n            normals[index * 3 + 1] = ny / nl;\n            normals[index * 3 + 2] = nz / nl;\n\n            // Tangent\n            const tx = -z;\n            const ty = 0;\n            const tz = x;\n            const tl = Math.sqrt(tx * tx + ty * ty + tz * tz);\n            tangents[index * 4] = tx / tl;\n            tangents[index * 4 + 1] = ty / tl;\n            tangents[index * 4 + 2] = tz / tl;\n            tangents[index * 4 + 3] = 1.0;\n\n            uvs[index * 2] = lon / resolution;\n            uvs[index * 2 + 1] = lat / resolution;\n            index++;\n        }\n    }\n\n    // Generate indices\n    index = 0;\n    for (let lat = 0; lat < resolution; lat++) {\n        for (let lon = 0; lon < resolution; lon++) {\n            const first = lat * (resolution + 1) + lon;\n            const second = first + resolution + 1;\n            indices[index] = first;\n            indices[index + 1] = second;\n            indices[index + 2] = first + 1;\n            indices[index + 3] = second;\n            indices[index + 4] = second + 1;\n            indices[index + 5] = first + 1;\n            index += 6;\n        }\n    }\n\n    const result: any = {\n        indices,\n        vertexBytes: quantizationFormat === QuantizationFormat.Uncompressed ? 3 * 4 + 3 * 4 + 4 * 4 + 2 * 4 : 16,\n        numVertices\n    };\n\n    if (quantizationFormat !== QuantizationFormat.Uncompressed) {\n        let meshQuantized;\n        switch (quantizationFormat) {\n            case QuantizationFormat.Quaternion12Bits:\n                meshQuantized = quantizeMeshQuaternion12Bits(numVertices, positions, normals, tangents, uvs, null, null);\n                result.vertexBytes = 16;\n                break;\n            case QuantizationFormat.Angle16Bits:\n            default:\n                meshQuantized = quantizeMeshAngle16Bits(numVertices, positions, normals, tangents, uvs, null, null);\n                result.vertexBytes = 16;\n                break;\n        }\n        result.quantizedData = meshQuantized.compressedData;\n        result.positionMin = meshQuantized.positionMin;\n        result.positionMax = meshQuantized.positionMax;\n    } else {\n        result.positions = positions;\n        result.normals = normals;\n        result.tangents = tangents;\n        result.uvs = uvs;\n    }\n\n    const end = performance.now();\n    const duration = end - start;\n    console.log(`Wavy sphere generation took ${duration.toFixed(2)}ms`);\n\n    self.postMessage(result, {\n        transfer: [\n            ...(quantizationFormat === QuantizationFormat.Uncompressed ? [positions.buffer, normals.buffer, tangents.buffer, uvs.buffer] : [result.quantizedData.buffer]),\n            indices.buffer\n        ]\n    });\n};\n"],"names":["EPSILON","ARRAY_TYPE","y","i","create","out","glMatrix.ARRAY_TYPE","clone","a","length","x","z","fromValues","subtract","b","normalize","len","dot","cross","ax","ay","az","bx","by","bz","sub","vec","stride","offset","count","fn","arg","l","set","w","scale","setAxisAngle","axis","rad","s","slerp","t","aw","bw","omega","cosom","sinom","scale0","scale1","glMatrix.EPSILON","fromMat3","m","fTrace","fRoot","j","k","vec4.scale","vec4.normalize","tmpvec3","vec3.create","xUnitVec3","vec3.fromValues","yUnitVec3","vec3.dot","vec3.cross","vec3.len","vec3.normalize","temp1","temp2","c","d","matr","mat3.create","view","right","up","encodeTangentAsAngle16","normal","tangent","tangentSign","normalCopy","vec3.clone","tangentCopy","tempVec","bitangent","cosAngle","crossProduct","sinAngle","normalizedAngle","quantizedAngle","QuantizationFormat","quantizeMeshAngle16Bits","numVertices","positions","normals","tangents","uvs","min","max","compressedData","positionMin","positionMax","range","vec3.sub","posIdx","tanIdx","uvIdx","outIdx","px","py","pz","encodedTangent","nx","ny","nz","invL1Norm","octX","octY","temp","quantizeMeshQuaternion12Bits","qTangent12","vec4Tmp","vec4.create","vec4.set","encodeQuaternion12Bits","TempVars","store4x12To3x16","first","second","third","quantizeSignedFloat","value","bits","maxValue","packQuaternion12BitsTo16Bits","q0","q1","q2","q3","toMat3","c00","c01","c02","c10","c11","c12","c20","c21","c22","mat4.create","quat.create","encodeQTangent","n","temps","numStorageBits","mat","quat.fromMat3","quat.normalize","quat.scale","bias","factor","cc","q","e","start","resolution","quantizationFormat","indices","waves","amplitude","index","lat","theta","sinTheta","cosTheta","lon","phi","sinPhi","cosPhi","wave","nl","tx","ty","tz","tl","result","meshQuantized","duration"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}